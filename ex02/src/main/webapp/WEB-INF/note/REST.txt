
REST 방식
- 서버에서 전송하는 것이 순수한 데이터라는 점을 인지하고 시작
=> 기존의 Controller에서 Model에 데이터를 담아서 JSP 등과 같은 뷰(View)로 전달하는 방식이 아니라 기존의 Controller과는 조금 다르게 동작한다.
- 스프링4부터 @Controller 이외에 @RestController라는 어노테이션이 추가되서 Controller의 모든 메서드의 리턴 타입을 기존과 다르게 처리 한다는 것을 명시한다.

@RestController
- Controller가 REST 방식을 처리하기 위한 것임을 명시한다.

@ResponseBody
- 일반적인 JSP와 같은 뷰로 전달되는 게 아니라 데이터 자체를 전달하기 위한 용도

@PathVariable 
- URL 경로에 있는 값을 파라미터로 추출하려고 할 때 사용

@CrossOrigin
- Ajax의 크로스 도메인 문제를 해결해주는 어노테이션

@RequestBody
- JSON 데이터를 원하는 타입으로 바인딩처리

----------------------------------------------------------------------
JSON 데이터를 처리하기 위한 jackson-databind
-> 위의 라이브러리는 나중에 브라우저에 객체를 JSON 이라는 포맷의 문자열로 변환시켜 전송할 떄 필요하다.
----------------------------------------------------------------------
JSON(JavaScript Object Notation)의 약어로 구조가 있는 데이터를 {} 으로 묶고 key 와 Value 값으로 구성하는 경량의 데이터 포맷
----------------------------------------------------------------------

@RestController은 JSP와 달리 순수한 데이털르 반환하는 형태이다
따라서 다양한 데이터를 전송 할수 있다.
- 많이 사용하는 형태
1. 일반문자열이나 JSON,XML등을 사용한다
================================================
	@GetMapping(value="/getSample",produces= {MediaType.APPLICATION_JSON_UTF8_VALUE,MediaType.APPLICATION_XML_VALUE})
	public SampleVO getSample() {
		return new SampleVO(112,"스타","로드");
	}
	
	호출하게되면 XML형식으로 나오고 확장자를 .json으로 호출하면 JSON형태로 호출이 가능하다.
	======================================
	속성지정은 필수 값은 아니어서 설정하지 않아도 괜찮다.
======================================================


ResponseEntity 타입
REST 방식으로 호출하는 경우는 화면 자체가 아니라 데이터 자체를 전송하는 방식으로 처리되기 때문에
데이터를 요청한쪽에서는 정상적인 데이터인지 비정상적인 데이터인지 구분할 수 있는 확실한 
방법을 제공해야한다.
ResponseEntity는 데이터와 함께 HTTP 헤더의 상태 메시지 등과 같이 전달하는 용도로사용

HTTP의 상태코드와 에러메시지 등을 함께 데이터를 전달 할 수 있기 때문에 받는 입장에서는 확실하게 결과를 알 수 있다.